# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: tendTo_bot_deploy

on:
  push:
    branches: [test]
  pull_request:
    branches: [test]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8.5
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-asyncio telethon
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Setup enviroment
        run: |
          mv data/db/sqlite.db.dist data/db/sqlite.db
          mv config/settings.yaml.dist config/settings.yaml
          python3 settings.py uselessToken 1 2 3 -d ${{secrets.DATABASE_URL}} --test_api_id ${{secrets.API_ID}} --test_api_hash ${{secrets.API_HASH}} --test_session ${{secrets.SESSION}} --test_tag ${{secrets.TEST_TAG}} --test_token ${{secrets.TEST_TOKEN}}
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest
      - name: Revert enviroment
        run: |
          python3 settings.py -r
          mv data/db/sqlite.db data/db/sqlite.db.dist
          mv config/settings.yaml config/settings.yaml.dist
      - name: Deploy to Heroku
        uses: AkhileshNS/heroku-deploy@v3.4.6
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.APP_NAME}}
          heroku_email: ${{secrets.EMAIL}}
          usedocker: true
          docker_build_args: |
            TOKEN
            DATABASE_URL
            WEB_URL
            GROUP_ID
            CHANNEL_ID
            CHANNEL_GROUP_ID
        env:
          TOKEN: ${{secrets.TOKEN}}
          DATABASE_URL: ${{secrets.DATABASE_URL}}
          WEB_URL: ${{secrets.WEB_URL}}
          GROUP_ID: ${{secrets.GROUP_ID}}
          CHANNEL_ID: ${{secrets.CHANNEL_ID}}
          CHANNEL_GROUP_ID: ${{secrets.CHANNEL_GROUP_ID}}
